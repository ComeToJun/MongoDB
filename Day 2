db.users.find()

db.users.updateOne({"username" : "joe"},
    {"$addToSet" : {"emails" : {"$each" :
    ["joe@naver.com", "joe@gmail.com", "joe@bit.com"]}}})
    
db.products.updateOne({"product color" : {"$ne" : "Red"}}, 		
{$push : {"product color" : "Red"}})
	
//not exist 라면 넣어라 
//Red 가 없으면 Red를 추가하겠다.

//$ne 랑 $addToSet 은 같은 연산자지만 addToSet 이 조금 더 직관적으로 알 수 있다.

db.users.updateOne({"username" : "joe"},
{"$pop" : {"emails" : 1}}) 

//뒤에서부터 하나씩 지운다 (만약 -1 이라면 앞에서부터 하나씩 지운다)

db.lists.insertOne({"todo" : ["dishes", "laundry", "gardening"]})
db.lists.findOne()

db.lists.updateOne({}, {"$pull" : {"todo" : "laundry"}})
// pull 은 지정한 하나만 따로 뺄 수 있다.
// 중간에 {} 만 있는건 지금 정해진 id가 하나밖에 없기 때문에 이며,
   만약 여러 id가 있다면 id 값을 넣어주어야 함
   예) {"_id" : ObjectId("5f03c173df29a13f091a0b09")} 이런식으로

*****문제점 : 항목값을 알아야만 지울 수 있다(Pull) - laundry 라는 항목이 있어야만 지울 수 있음




db.blog.posts.insertOne({"content" : "...",
    "comments" : [
        {"comment" : "good post", "author" : "John", "votes" : 0},
        {"comment" : "I thought it was too short", "author" : "Claire", "votes" : 3},
        {"comment" : "free watches", "author" : "Alice" , "votes" : -5},
        {"comment" : "vacation getaways", "author" : "Lynn", "votes" : -7}
       ]
}) 

db.blog.posts.updateOne({"comments.author" : "John"},    //업데이트 대상
    {"$inc" : {"comments.0.votes" : 1}})			//뽑은 대상에서 무엇을 할건지 
					(즉, comments 의 인덱스 0번째 항목을 올려주겠다는 말.

//comments.1.votes 가 된다면 두번째에 있는 Claire 로 접근하게된다.
즉, John 은 어떤 도큐먼트를 선택해서 업데이트 할 것인지에 대해서 알려주는 것.

//John 의 votes 를 1 로 올려주겠다. 라고 했을때 inc 로 배열식을 써서 가능 
**JavaScript 에서는 comments[0].votes 도 가능 comments.0.votes 도 가능

db.blog.posts.updateOne({"comments.comment" : "good post"},
    {"$inc" : {"comments.0.votes" : 1}})

이것도 같은 방식으로 가능//



db.blog.posts.updateOne({"comments.author" : "John"},
    {"$set" : {"comments.$.author" : "Jim"}})

John 을 찾아서 $ 에 넣어놓고 Jim 으로 바꾸겠다.

db.blog.posts.updateOne({"comments.author" : "Jim"},
    {"$inc" : {"comments.$.votes" : 1}})

Jim 을 찾아서 그 항목에 있는 votes 에게 1을 더 주겠다.




db.blog.posts.updateOne({},
{"$set" : {"comments.$[elem].hidden" : true}},
{arrayFilters : [ {"elem.votes" : { $lte : -5}}]})

//전체  elements 를 조사해서 hidden 이 있으면 그 값을 찾아 대입하고 아니면 만들어라 (set 특징)
//arrayFilters 를 이용해서 -5보다 작거나 같은게 있으면(less than equal) 찾아서 true 값을 주어라
*** hidden 필드가 없으니 hidden 을 만들고 -5보다 작거나 같은걸 찾아 ture 값을 준다.


Upsert
필터에 매칭되는 document가 없을 때에는 새로운 document가 생성되며 document가 있을 경우에는
정상적인 update가 이루어진다.

db.analytics.updateOne({"url" : "/blog"}, {"$inc" : {"pageviews" : 1}}, {"upsert" : true})
//url 이 /blog 인 놈에 대해서 pageviews를 1 올려주고 싶은데,
  없다면 하나 새로 만들어서 1 올려줘라



db.users.updateOne({"username" : "kim"}, {"$setOnInsert" : {"createdAt" : new Date() }}, {"upsert" : true})
kim 이 있으면 오늘 날짜를 입력해줘라 없으면 새로 만들고 오늘 날짜까지 입력해줘라
(도큐먼트 처음 생성할때만!)
즉, 다시 한번 적용을 하면 최초 작성 시간만 계속해서 유지해준다. ( setOnInsert 의 기능)
*** 그 날짜와 시간이 처음과 비교해서 바뀌지 않는다.
*** 최초작성일을 적어놓음으로써 따로 로직을 짜서 구하지 않아도 되는 번거로움을 없애준다.

만약 원래 있던 데이터인 joe 에게 적용하면,

db.users.updateOne({"username" : "joe"}, {"$setOnInsert" : {"createdAt" : new Date() }}, {"upsert" : true})

*** 아무일도 일어나지 않는다.



db.users.insertMany([
    {"birthday" : "10/13/1978"},
    {"birthday" : "10/13/1978"},
    {"birthday" : "10/13/1978"}])
    
db.users.find().pretty()

db.users.updateMany({"birthday" : "10/13/1978"}, {"$set": {"gift" : "Happy Birtday!"}})

updateMany 로 3개 바꿔주기 가능.

find
find 메소드의 첫번째 인자가 쿼리 조건을 명시하는 도큐먼트이다
컬렉션안의 모든 도큐먼트를 지칭하기 위해서 빈 쿼리 도큐먼트({}) 를 사용할 수 있다.
만약 find 메소드의 쿼리 도큐먼트가 생략되면 {} 로 설정된다.


db.users.insertMany([
{"username" : "joe", "age" : 27, "sex" : "male"},
{"username" : "Jane", "age" : 26, "sex" : "female"}])
//도큐먼트 만들기


db.users.find({}, {"username" : 1, "age" : 1, "_id": 0}).pretty()
// find({조건}) , 디스플레이 될 필드, 1은 필요할때 0은 필요 없을때

db.stock.find({"in_stock" : "this.num_sold"}) // 이런 문법은 지원하지 않는다.
find 는 직접적인 값이 와야함

"$lt", "$lte", "$gt", "$gte"
( <   , <=  ,  >   ,  >= )

OR 

"$in"
db.raffle.find({"ticket_no" : {"$in" : [725,542,390]}})  // 725 거나 542 거나 390
db.users.find({"user_id" : {"$in" : [12345, "joe"]}})

$in 에 제공되는 배열 항목이 한개일때는 다이렉트 매칭과 동일하게 작용
{ticket_no : ($in : [725]}} 과 {ticket_no : 725} 은 내부적으로 동일하게 작용

$in 의 반대는 $nin
db.raffle.find({ticket_no" : {"$nin" : [725, 542 ,390]}})

비교할 key 가 2개 이상일 경우 "$or" 사용
db.raffle.find({"$or" : [{"ticket_no" : 725}, {"winner" : true}]})
db.raffle.find({"$or" : [{"ticket_no" : {"$in" : [725, 542, 290]}}, {"winner" : true}]})

가능하다면 "$or" 보다는 "$in" 을 사용 ==> 쿼리 optimizer 가 작동

$not
모든 조건에 함께 사용 가능

"id_num" 값을 5로 나눈 후 나머지가 1인 경우
db.users.find({"id_num" : {"$mod" : [5, 1]}})

위와 반대인 경우
db.users.find({"id_num" : {"$not" : {"$mod" : [5, 1]}})

--------------------------------------------------------------------------------


db.null_check.insertMany([
{"y" : null},
{"y" : 1},
{"y" : 2}])

db.null_check.find().pretty()

db.null_check.find({"x" : null}) // y가 아닌 존재하지 않는 x 필드를 찾으려고 하니 모든 필드를 보여준다.

{
    "_id" : ObjectId("5f03dc7fdf29a13f091a0b10"),			//이 값이 나옴
    "y" : null
}

/* 2 */
{
    "_id" : ObjectId("5f03dc7fdf29a13f091a0b11"),
    "y" : 1.0
}

/* 3 */
{
    "_id" : ObjectId("5f03dc7fdf29a13f091a0b12"),
    "y" : 2.0
}

********************
db.null_check.find({"x" : {"$eq" : null, "$exists" : true}})
**********************
 x가 존재하고 그게 null 인가에 대해서 물어보는것 ** 결과값으로 아무것도 나오지 않는다.


db.food.insertOne({"fruit" : ["apple", "banana", "peach"]})

db.food.find({"fruit" : "banana"})   //값 나옴

db.food.find({"fruit" : ["banana", "peach"]}) //값 나오지 않는다.
** 배열로 줬기 때문에 배열에 있는 것 전부를 찾는다고 나온다.



//다시 새로 만든다. id 값을 주기 위해서

db.food.insertOne({"_id" : 1, "fruit" : ["apple", "banana", "peach"]})
db.food.insertOne({"_id" : 2, "fruit" : ["apple", "kumquat", "orange"]})
db.food.insertOne({"_id" : 3, "fruit" : ["cherry", "banana", "apple"]})


db.food.find({fruit : {"$all" : ["apple", "banana"]}}) //all = apple banana 가 모두 들어있는 것.
만약 db.food.find({"fruit" : ["apple", "banana"]}) 라면 값이 나오지 않는다. ( 두개만 갖고 있는 배열을 찾기 때문)


db.food.find({"fruit" : ["apple", "banana", "peach"]}) 라면 1번값이 나오는데, 수와 순서까지 전부 맞아야 한다 **시험

db.food.find({"fruit.2" : "peach"}) //fruit 항목의 배열중에 0, 1, 2 즉, 2의 자리에 peach 가 있는 것

db.food.find({"fruit" : {"$size" : 3}}) //배열 사이즈가 3개인 것

$slice

find 의 두번째 인자를 반환값에 대한 것
"$slice" 는 반환되는 배열의 subset을 얻게 한다.

배열의 처음 10개 항목 추출(-10: 마지막 10개)
db.blog.posts.findOne(criteria, {"comments" : {$slice" : 10}})

처음 23개 항목 건너뛰고 24번째 부터 10개
db.blog.posts.findOne(criteria, {"comments" : {"$slice" : [23, 10]}})



----------------------------------------------------------------------------------------



db.blog.posts.find({"comments.author" : "Alice"}, {"comments.$" : 1}).pretty()
Alice 라는 이름을 가진 것을 찾아라.
Alice 가 여러 도큐먼트라 해도 첫번째 걸린 한놈만 나온다.

comments 다음 1 이 있는건 Json 문법에 맞춰주기 위해서임







db.array_test.insertMany([
{"x" : 5},
{"x" : 15},
{"x" : 25},
{"x" : [5, 25]}
])


db.array_test.find({"x" : {"$gt" : 10, "$lt" : 20}})
//결과값 밑에

{
    "_id" : ObjectId("5f03f71adf29a13f091a0b19"),
    "x" : 15.0
}

/* 2 */
{
    "_id" : ObjectId("5f03f71adf29a13f091a0b1b"),
    "x" : [ 
        5.0, 
        25.0
    ]
}

// 두가지 조건에 전부 충족하는걸 찾는다.
// 사실 의도는 15만 나오면 된다.


db.array_test.find({"x" : {"$elemMatch" : {"$gt" : 10, "$lt" : 20}}})
*** 배열 내부까지 들어가서 값을 찾는다.


db.people.insertOne({"name" : {"first" : "joe", "last" : "Kim"}, "age" : 45})

db.people.find({"name" : {"first" : "joe", "last" : "Kim"}})
// 순서와 값이 다 같아야 나올 수 있다.

db.people.find({"name.first" : "joe", "name.last" :"Kim"})
//중간에 middle name 이 들어가도 찾아올 수 있다.
//일반적인 필드네임을 설정할때 . 을 붙이면 안된다.




------------------------------------------------------------

db.blog.posts.insertOne({"content" : "...",
        "comments" : [
        { "author" : "kim", "score" : 3, "comment" : "nice post"},
        { "author" : "park", "score" : 6, "comment" : "terrivle post"}
        ]
    })



db.blog.posts.find({"comments" : {"author" : "kim", "score" : {"$gte" : 5}}})

아무것도 데이터가 안나옴


db.blog.posts.find({"comments.author" : "kim", "comments.score" : {"$gte" : 5}}).pretty()

{
    "_id" : ObjectId("5f03fa88df29a13f091a0b1d"),
    "content" : "...",
    "comments" : [ 
        {
            "author" : "kim",
            "score" : 3.0,
            "comment" : "nice post"
        }, 
        {
            "author" : "park",
            "score" : 6.0,
            "comment" : "terrivle post"
        }
    ]
}

배열로 전부 검색을 해서 kim 이면서 5이상이기도 한게 있다면 배열을 불러버림 잘못된 검색(원하는것을 가져오지 못함)

db.blog.posts.find({"comments" : {"$elemMatch" : {"author" : "kim" , "score" : {"$gte" : 5 }}}})

하나씩 따로 검색을 하는데, author 가 kim 이면서 score 도 5 이상인걸 하나하나 찾기 때문에 결과값이 없음

--------------------------------------------------------------------------------------
$where Query
기존의 key/value 표현으로 처리할 수 없는 경우, $where 쿼리를 사용
임의의 JavaScript를 사용할 수 있게 함
그러나 보안상의 이유로 유저의 "$where" 의 사용이 엄격히 제한되거나, 아예 사용할 수 없게 
막아버리는 경우도 있음


db.foo.insertOne({"apple" : 1, "banana" : 6, "peach" : 3})
db.foo.insertOne({"apple" : 8, "spinach" : 4, "watermelon" : 4})

find 으로는 해결할 수 없는걸 where 로 해결 가능

db.foo.find({"$where" : function () {
    for(var current in this) {
        for(var other in this) {
            if(current != other && this[current] == this[other]) {
                return true;
            }
        }
    }
    return false;
}});
      
결과
{
    "_id" : ObjectId("5f03fdfddf29a13f091a0b21"),
    "apple" : 8.0,
    "spinach" : 4.0,
    "watermelon" : 4.0
}

current 필드  this 는 다큐먼트. apple 들어가고 other 에는 또 다른 다큐먼트로 apple, spinach, watermelon이
들어옴

여기서 비교 apple != spinach and 숫자가 같으면 true
결과값 배출


----------------------------------------------------------------------------------------

for(i=0; i<100; i++) {
    db.test_colletion.insertOne({x : i});
}

--

db.test_colletion.find()

--

var cursor = db.test_collection.find().sort({"x" : 1}).limit(10).skip(10);   //1은 오름차순 -1내림차순 
							 //limit(10)개까지만 나와라  
							//skip(10)앞에10개는 skip

--
cursor.forEach(function(x) {
        print(x.x);
        })

이런방식도 있음






--------------------------------------------------------------------

aggregation (집합 함수)

aggregation framework 을 제공한다.



mongoimport --db test --collection restaurants --drop --file D:\JunMongo_db\restaurants.json
	         콜렉션 넣을 이름 --레스토랑이 있으면 덮어써라 --파일이름 (실제 파일이 있는 장소)

커맨드에서 몽고임포트를 사용해 파일 가져오기 (Json 파일 가져올때 쓰는 문법)


db.restaurants.aggregate([{$match : {cuisine : "Hamburgers"}} ]) 

// 무조건 배열 [] 넣을 것. 햄버거 파는 레스토랑 조건 매칭

db.restaurants.aggregate([{$match : {cuisine : "Hamburgers"}}, 
{$project : {
    _id: 0,
    cuisine : 1,
    borough : 1,
    name : 1
}}
])

//cuisine borough name 만 나올 것


db.restaurants.aggregate([
    {$match : {cuisine : "Hamburgers"}},
    {$limit: 10}, <<<<<<<<
    {$project : {
    _id: 0,
    cuisine : 1,
    borough : 1,
    name : 1
}}
])  

//결과값을 10개만 나타낼 것.

db.restaurants.aggregate([
    {$match : {cuisine : "Hamburgers"}},
    {$sort : { name : 1}},<<<<<<
    {$limit: 10},
    {$project : {
    _id: 0,
    cuisine : 1,
    borough : 1,
    name : 1
}}
])   

//결과값을 10개만 나타내고 이름순으로 분류해서 오름차순

db.restaurants.aggregate([
    {$match : {cuisine : "Hamburgers"}},
    {$sort : { name : 1}},
    {$skip : 10},
    {$limit: 10},
    {$project : {
    _id: 0,
    cuisine : 1,
    borough : 1,
    name : 1
}}
])   

// sort 한 값에서 10개는 skip 하고 나머지 10개를 오름차순으로 출력





db.restaurants.aggregate([
    {$match : {"address.street" : "Stillwell Avenue"}},
    {$project : {
        _id : 0,
        cuisine : 1,
        name : 1,
        dates : "$grades.date",
        valuation : "$grades.grade",
        scores : "$grades.score"}}
]).pretty()

정해진 값을 출력함


db.restaurants.aggregate([
    {$match : {"address.street" : "Stillwell Avenue"}},     //값을 명시
    {$unwind : "$grades"}, <<<<<<<<<<		//필드명 명시
    {$project : {
        _id : 0,
        cuisine : 1,
        name : 1,
        dates : "$grades.date",	<<
        valuation : "$grades.grade",	<<
        scores : "$grades.score"}}	<<
]).pretty()


element == grades 안의 값을 쪼개서 3개로 표시함  

집합함수에서 도큐먼트 내의 필드값을 레퍼런스 할때는 무조건 $ 을 붙여줘야 함// 문법임





db.restaurants.aggregate([
            {$match : {"cuisine" : "Italian", "borough" : "Brooklyn"}},
            {$project : {
                        _id : 0,
                        cuisine : 1,
                        name : 1,
                        praise : {
                            $filter : {
                                input : "$grades",
                                as : "good",
                                cond :{$gte : ["$$good.score", 20]}
                            }
                        }
                        
                    }
                },
            ]).pretty()


$ 하나 필드명, 없으면 변수, 변수를 지칭할땐 두개 $$
이 명령은 전체를 불러오기 때문에 filter 에 있는 good.score 20 이하인 가게들도 불러온다.


db.restaurants.aggregate([
            {$match : {"cuisine" : "Italian", "borough" : "Brooklyn"}},
            {$project : {
                        _id : 0,
                        cuisine : 1,
                        name : 1,
                        praise : {
                            $filter : {
                                input : "$grades",
                                as : "good",
                                cond :{$gte : ["$$good.score", 20]}
                            }
                        }
                        
                    }
                },
                {$match : {"praise.0" : {"$exists" : true}}},   //praise 항목에 인덱스로 하나라도 있는사람만 불러와라
            ]).pretty()




db.restaurants.aggregate([
            {$match : {"cuisine" : "Italian", "borough" : "Brooklyn"}},
            {$project : {
                        _id : 0,
                        cuisine : 1,
                        name : 1,
                        praise : {
                            $filter : {
                                input : "$grades",
                                as : "good",
                                cond :{$gte : ["$$good.score", 20]}
                            }
                        }
                        
                    }
                },
                {$match : {"praise.0" : {"$exists" : true}}},
                
            ]).toArray().length	// 전체 개수 확인할때
