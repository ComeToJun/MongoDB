db.restaurants.find().limit(2).pretty()
//이미 평가는 오름차순으로 나타나 있음

db.restaurants.aggregate([
    {$match : {"cuisine" : "Italian", "borough" : "Brooklyn"}},
    {$project : {
                _id : 0,
                cuisine : 1,
                name : 1,
                last_award : {$arrayElemAt : ["$grades", 0]},
                first_award : {$arrayElemAt : ["$grades", -1]}
            }
        }
    ]).pretty()

가장 최근 평가와 가장 최초 평가만 나타내기 
$arrayElemAt 하나만 지정해서 나타내주기 0 = 첫번째 인덱스 -1 = 마지막에서 첫번째


db.restaurants.aggregate([
    {$match : {"cuisine" : "Italian", "borough" : "Brooklyn"}},
    {$project : {
                _id : 0,
                cuisine : 1,
                name : 1,
                latest_award : {$slice : ["$grades", 0, 2] },  //필드명, 스타트위치, 필요위치
                
            }
        }
    ]).pretty()

가장 최근의 2개의 결과값 ( -2 라면 가장 끝에 있는 2개의 값)


        db.restaurants.aggregate([
    {$match : {"cuisine" : "Italian", "borough" : "Brooklyn"}},
    {$project : {
                _id : 0,
                cuisine : 1,
                name : 1,
                total_award : { $size : "$grades"}
                
            }
        }
    ]).pretty()

총 몇번의 평가를 받았는가



   db.restaurants.aggregate([
    {$match : {"cuisine" : "Italian", "borough" : "Brooklyn"}},
    {$project : {
                _id : 0,
                cuisine : 1,
                name : 1,
                max_award : { $max : "$grades.score"},
                
                
                
            } 
        }
    ]).pretty()

가장 큰 점수를 받았을때


db.restaurants.aggregate([
    {$match : {"cuisine" : "Italian", "borough" : "Brooklyn"}},
    {$project : {
                _id : 0,
                cuisine : 1,
                name : 1,
                sum_award : { $sum : "$grades.score"},
                
                
                
            } 
        }
    ]).pretty()

점수의 합

db.restaurants.aggregate([
    {$match : {"cuisine" : "Italian", "borough" : "Brooklyn"}},
    {$project : {
                _id : 0,
                cuisine : 1,
                name : 1,
                avg_award : { $avg : "$grades.score"},
                
                
                
            } 
        }
    ]).pretty()



평균 구하기



************************************************companies.jason.

설립날짜로 묶어서 평균직원 수를 구할것

db.companies.aggregate([
            {$group : {
                    _id : {founded_year : "$founded_year"},
                    average_number_of_employees : {$avg : "$number_of_employees"}
                }},
                {$sort : {average_number_of_employees : -1}}	// 내림차순
                ])

$group 이 들어가면 _id 로 꼭 무엇을 그룹 할지 지정해야함




     db.companies.aggregate([
                { $match: {"relationships.person": {$ne: null} } },   //relationships 라는 곳에 있는 person data 만 뽑아라 (null 은 필요없다)
                { $project: { relationships : 1, _id: 0} },	//relationship에서만 찍을거야
                { $unwind: "$relationships" },		//배열에 있는 여러 도큐먼트를 각각 잘라서 하나씩으로 만들겠다.
                { $group: {
                    _id : "$relationships.person",		// 그 중 person 만 그룹핑을 해서
                    count: { $sum: 1 }			// 동일한 사람에 대해서 1씩 올리겠다.
                } },
                { $sort: { count: -1} }			//내림차순
                ]).pretty()

맨 위에 있는 결과값을 그 밑에서 받아들이다. match 에서의 결과값을 project가 받아들임.
relationships 라는건 해당 회사와 관계가 있는 사람들을 모아준거니
count 숫자가 높을수록 많은 회사와 관계가 있거나 이직을 했던 사람이니
높은 능력을 가지고 있다고 볼 수 있다.

$group 이 들어가면 _id 로 꼭 무엇을 그룹 할지 지정해야함

오라클에서 group by 했을때 위에서 정했던 것이 group by 다음에 와야 하는 것과 같은 이치

-------------------------
ename, dept
from emp
group by **ename**  
---------------------------



db.companies.aggregate([
                { $match : { founded_year : { $gte : 2010} } },
                { $group : {
                        _id : { founded : "$founded_year"},
                        companies : { $push : "$name" }
                    }},
                    { $sort : {"_id.founded" : 1 } }
                    ]).pretty()

설립연도가 2010년 이후부터 만들어진 회사의 이름을 회사연도별로 그룹을 하는데
push를 하면 배열을 만들어서 넣기 때문에 (연도가 중복된다고 해도 이름은 넣어라 **중복된 데이터가 있다고 해도 넣어라)				 
id(설립연도) 오름차순으로 정렬해서 나타낼 것 

**push 는 중복이 된다고 해도 중복되는 만큼 그대로 자료를 넣는다.



   db.companies.aggregate([
                { $match : { founded_year : { $gte : 2010} } },
                { $group : {  
                        _id : { founded_year : "$founded_year", category_code: "$category_code"},
                        companies : { $push : "$name" }             
                    }},
                    { $sort : { "_id.founded_year" : 1}}
                    ]).pretty()

설립연도가 2010년 이후 만들어진 그룹 이름을 카테고리까지 같이 그룹해서 오름차순 정렬 후 나타냄



//db.companies.find({"companies" : "$ne":ipo},
//                        {"ipo":1, _id:0})
                      				//틀린답

  
db.companies.findOne({"ipo" : {"$exists" : true, "$ne" : null}})
 ipo를 찾을때 필요한 명령문 - ipo가 존재해야 하는데, null 이 아닌 것 즉, 데이터 값은 있어야 함					
					//맞는 답


--------------------------------------------------------------


db.companies.aggregate([
      { $group : {
          _id : { ipo_year : "$ipo.pub_year"},
          companies : { $push: "$name" }
      }},
      { $sort: { "_id.ipo_year": 1}}
      ]).pretty()

ipo 를 실제로 실행한 날 pub_year // companies 라는 배열을 만들어서 이름을 넣는다.
ipo_year 에 null 이 나오는 이유는 실행한 연도가 없는 것.

db.companies.aggregate([
      { $group : {
          _id : { ipo_year : "$ipo.pub_year"},
          companies : { $push: "$name" }
      }},
      { $sort: { "_id.ipo_year": 1}},
      { $match: { "_id.ipo_year": {$ne: null}}},
      ]).pretty()

null 값이 있는 애들은 뺀다.

db.companies.aggregate([
      { $match: { "ipo.pub_year": {"$exists" : true, "$ne" : null}}},
      { $group : {
          _id : { ipo_year : "$ipo.pub_year"},
          companies : { $push: "$name" }
      }},
      { $sort: { "_id.ipo_year": 1}}
      ]).pretty()

null 값이 있는 애들은 뺀다.

--------------------------------------------------------------------------------

   db.companies.aggregate([
            { $group : {
                 _id : null,
                count: {$sum : 1}
            }}
        ])  

** 회사 개수 구하는 방법

db.companies.count() 도 가능



db.companies.aggregate([
            { $group : {
                _id : "$category_code" 
            }}
        ])     

**category_code 만 볼 수 있게 하는 코드

   
-----------------------------------------------------------------


db.companies.aggregate([
            {$match: {funding_rounds: { $ne: [] }}},
            {$unwind: "$funding_rounds"},
                {$sort: {"funding_rounds.funded_year" : 1,
                    "funding_rounds.funded_month": 1,
                    "funding_rounds.funded_day" : 1}},
                {$group : {
                    _id: {company: "$name"},
                    funding: {
                        $push: {
                            amount: "$funding_rounds.raised_amount",
                            year: "$funding_rounds.funded_year"
                        }
                    }
                }}
            ]).pretty()





 db.companies.aggregate([
            {$match: {funding_rounds: { $exists: true, $ne: [] }}},
            {$unwind: "$funding_rounds"},
                {$sort: {"funding_rounds.funded_year" : 1,
                    "funding_rounds.funded_month": 1,
                    "funding_rounds.funded_day" : 1}},
                {$group : {
                    _id: {company: "$name"},
                    first_round: {$first: "$funding_rounds"},
                    last_round: {$last: "$funding_rounds"},
                    num_round: {$sum: 1},
                    total_raised: {$sum: "$funding_rounds.raised_amount"}
                }},
                {$project: {
                    _id: 0,
                    company: "$_id.company",
                    first_round: {
                        amount: "$first_round.raised_amount",
                        article: "$first_round.source_url",
                        year: "$first_round.funded_year"
                    },
                    last_round: {
                        amount: "$last_round.raised_amount",
                        article: "last_round.source_url",
                        year: "$last_round.funded_year"
                    },
                    num_rounds: 1,
                    total_raised: 1
                }},
                {$sort: {total_raised: -1}}
                ]).pretty()


다시 한번 확인하기*********************************************************************************


	db.orders.insertMany([
                {"_id" : 1, "item" : "almonds", "price" : 12, "quantity" : 2},
                {"_id" : 2, "item" : "pecans", "price" : 20, "quantity" : 1},
                {"_id" : 3 }
                ])
                
                
                
                
             db.inventory.insertMany([
                {"_id" : 1, "sku" : "almonds", "description" : "product 1", "instock" : 120},
                {"_id" : 2, "sku" : "bread", "description" : "product 2", "instock" : 80},
                {"_id" : 3, "sku" : "cashews", "description" : "product 3", "instock" : 60},
                {"_id" : 4, "sku" : "pecans", "description" : "product 4", "instock" : 70},
                {"_id" : 5, "sku" : null, "description" : "Incomplete"},
                {"_id" : 6 }
                ])

********join 으로 위 두개를 묶음

db.orders.aggregate([
                {
                    $lookup :
                    {
                        from:"inventory",
                        localField: "item",
                        foreignField: "sku",
                        as: "inventory_docs"
                    }
                }
            ]).pretty()

***** join 을 사용해서 묶음




db.classes.insertMany( [
                {_id: 1, title: "Reading is ..." , enrollmentlist : [ "giraffe2", "pandabear", "artie"], days: ["M", "W", "F"] },
                {_id: 2, title: "But Writing ..." , enrollmentlist : [ "giraffe1", "artie"], days: ["T", "F"] },
                ])
                
        
                
                db.members.insertMany([
                    {_id: 1, name: "artie", joined: new Date("2016-05-01"), status: "A" },
                    {_id: 2, name: "giraffe", joined: new Date("2017-05-01"), status: "D" },
                    {_id: 3, name: "giraffe1", joined: new Date("2017-10-01"), status: "A" },
                    {_id: 4, name: "panda", joined: new Date("2018-10-11"), status: "A" },
                    {_id: 5, name: "pandabear", joined: new Date("2018-12-01"), status: "A" },
                    {_id: 6, name: "giraffe2", joined: new Date("2018-12-01"), status: "D" },
                    ])
                    
             
                    
                    
               db.classes.aggregate([
                    {$lookup : {
                        from: "members",
                        localField: "enrollmentlist",
                        foreignField: "name",
                        as: "enrollee_info"
                    }}
                  ]).pretty()
                    
                
                ])
                
                
                
                
                
                db.orders.aggregate([
                {
                    $lookup :
                    {
                        from:"inventory",
                        localField: "item",
                        foreignField: "sku",
                        as: "inventory_docs"
                    }
                }
            ]).pretty()



**************** join 사용해서 결과값 묶어주기





개념 묻는거 간단하게 나옴
오브젝트 아이디 따로 설명한거 어떻게 구성되어있고 뭐다
다 보면 되면 오브젝트 아이디에 대한 설명 중 잘못된 것은

***Ojectld 는 "_id"의 기본 타입
- 서로 다른 장치를 넘나들면서 전체적으로 유일한 키를 생성하는 방법
- primary key를 위한 전통적인 자동생성 값을 사용하지 않고 Objectld를 사용하는 이유는
  MongoDB의 분산환경을 기본으로 하는 성질 때문임
- 다중 서버를 넘나들며 자동생성한 primary key를 동기화하는 작업은 매우 까다로우며 많은 시간을 요구함
- 12 bytes length

----Timestamp
 - A timestamp in seconds since the epoch, of when each document was created
---- Machine
 - A unique identifier of the machine on which it was generated.
this is usually a hash of the machine's hostname.

this can be handled by the MongoDB server but  will generally be done by the driver on the client side







첫날.
쉘 헬퍼들 소개
쇼디비즈 유즈디비명 쓰는거
그거에 대응되는 실제 함수들에 대해서 디비.어쩌고
3개 있는데 4지선다형에서 아닌것은

use foo db.getSisterDB("foo")
show dbs db.getMongo().getDBs()
show collections db.getCollectionNames()






어떤 키값주고 밸류값 주고 도큐먼트 하나 줘라
키값 네임 밸류 반장 해서 도큐먼트 하나 특정 컬렉션에 집어넣어서 만들어라 (전부 쓰시오)

*******************db.jun.insertOne({"name" : "jun"})

db.콜렉션.insertOne 이나 Many 골라서 써서 넣기







인서트 방식이 매니할때 오더드와 언오더드 
일부러 키 중복 시켰을때 두개의 다른 결과값 그거 구분할 줄 알아야함
두개의 다른 결과 비교하기

db.movies.insertMany([ {"_id": 0, "title" : "Top Gun"},
{"_id" : 1, "title" : "Back to the Futrue"},			
{"_id" : 1, "title" : "Gremlins"},
{"_id" : 2, "title" : "Aliens"}])

//중복되는 키는 먼저 나오는 키만 출력되고 나머지는 출력되지 않는다.

{ "_id" : 0, "title" : "Top Gun" }
{ "_id" : 1, "title" : "Back to the Futrue" }

db.movies.insertMany([
{"_id" : 3, "title" : "Sixteen Candles"},
{"_id" : 4, "title" : "The Terminator"},
{"_id" : 4, "title" : "The Princess Bride"},
{"_id" : 5, "title" : "Scarface"}],
{"ordered" : false})		
	
// ordered 에 false 가 들어가면 중복되는건 위에 하나만 나오되, 그 다음에 있는 데이터도 출력된다.

db.movies.find()
{ "_id" : 0, "title" : "Top Gun" }
{ "_id" : 1, "title" : "Back to the Futrue" }
{ "_id" : 3, "title" : "Sixteen Candles" }
{ "_id" : 4, "title" : "The Terminator" }
{ "_id" : 5, "title" : "Scarface" }







삭제 딜리트 원 딜리트 매니 딜리트 만은 아님
하나 지울때 특별히 그 중에서 필요한 것을 지정해서 지우기 전부 쓰시오

db.movies.deleteOne({"_id" : 4})


db.movies.find()
{ "_id" : 0, "title" : "Top Gun" }
{ "_id" : 1, "title" : "Back to the Futrue" }
{ "_id" : 3, "title" : "Sixteen Candles" }
{ "_id" : 5, "title" : "Scarface" }








여러개 지울때는 딜리트매니
하나 지울때는 딜리트원

db.movies.insertMany([
{"_id" : 0, "title" : "Top Gun", "year": 1986},
{"_id" : 1, "title" : "Backt to the Future", "year" : 1985},
{"_id" : 3, "title" : "Sixteen Candles", "year" : 1984},
{"_id" : 4, "title" : "The Terminator", "year" : 1984},
{"_id" : 5, "title" : "Scarface", "year" : 1983 }])

db.movies.deleteMany({"year" : 1984})

db.movies.find()
{ "_id" : 0, "title" : "Top Gun", "year" : 1986 }
{ "_id" : 1, "title" : "Backt to the Future", "year" : 1985 }
{ "_id" : 5, "title" : "Scarface", "year" : 1983 }

db.movies.deleteMany({})






업데이트 
업데이트에서 쓸 수 있는 연산자 중 inc 페이지뷰 증가시키기


{ "_id" : ObjectId("5f02b7bab158eefd070871c2"), "url" : "www.example.com", "pageview" : 52, "pageviews" : 1 }
{ "_id" : ObjectId("5f02b81eb158eefd070871c3"), "url" : "www.example.com", "pageview" : 52 }
{ "_id" : ObjectId("5f02ba28250795271a99a1ff"), "url" : "www.example.com", "pageview" : 52 }

db.analytics.updateOne({"url" : "www.example.com"}, {"$inc":  {"pageviews" : 1}})


db.analytics.find()
{ "_id" : ObjectId("5f02b7bab158eefd070871c2"), "url" : "www.example.com", "pageview" : 52, "pageviews" : 2 }
{ "_id" : ObjectId("5f02b81eb158eefd070871c3"), "url" : "www.example.com", "pageview" : 52 }
{ "_id" : ObjectId("5f02ba28250795271a99a1ff"), "url" : "www.example.com", "pageview" : 52 }



업데이트 할때 set 쓰는 방법
해당 필드가 존재하면 엎어쓰기 존재하지 않으면 필드를 새로 만들어줌

db.users.updateOne({"name" : "joe"},
{"$set" : {"favorite book" : "War and Peace"}})

db.users.updateOne({"name" : "joe"},
{"$set" : {"favorite book" :
["Cat's Cradle", "Foundation Trilogy", "ender's Game"]}})





특정 필드를 삭제할때는 unset 을 사용 잘 봐두기

 "_id" : ObjectId("5f02becd250795271a99a200"),
        "name" : "joe",
        "age" : 30,
        "sex" : "male",
        "location" : "Seoul",
        "favorite book" : [
                "Cat's Cradle",
                "Foundation Trilogy",
                "Ender's Game"

db.users.updateOne({"name" : "joe"},
{"$unset" : {"favorite book" : 1}})

db.users.find().pretty()
{
        "_id" : ObjectId("5f02becd250795271a99a200"),
        "name" : "joe",
        "age" : 30,
        "sex" : "male",
        "location" : "Seoul"
}
1 은 아무 의미가 없음. 어쩔 수 없이 넣어야 하는 값이기 때문에 어떤 값을 넣어도 됨







특정 필드가 배열로 되어있을때 업데이트 해서 배열 항목을 추가시키기
push


db.blog.posts.insertMany([
{"title" : "A blog post", "content" : "..."},
{"title" : "Notice", "content" : "Welcome!!"}])
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("5f02c83c250795271a99a204"),
                ObjectId("5f02c83c250795271a99a205")
        ]
}

> db.blog.posts.findOne()
{
        "_id" : ObjectId("5f02c83c250795271a99a204"),
        "title" : "A blog post",
        "content" : "..."
}
db.blog.posts.updateOne({"title" : "A blog post"},
{"$push" : {"comments" :
{"name" : "joe", "email" : "joe@example.com", "content" : "nice post."}}})



db.blog.posts.findOne()
{
        "_id" : ObjectId("5f02c83c250795271a99a204"),
        "title" : "A blog post",
        "content" : "...",
        "comments" : [
                {
                        "name" : "joe",
                        "email" : "joe@example.com",
                        "content" : "nice post."
                }
        ]

**push 입력순간 배열로 인식 // 배열에 넣어줌


 db.stock.ticker.updateOne({"_id" : "GOOG"},			
... {"$push" : {"hourly" : {"$each" : [562.776, 562.790, 559.123]}}})		

** update 되는게 없지만, 문법만 알아둘 것.

each 로 쓰면 배열로 하나씩 넣는게 아닌 한번에 전부 넣어주는게 가능함.

여러개 동시에 쓸때는 each 하나쓸때와 여러개 쓸때를 잘 구분할 것











find 쓸때 첫번째 인자는 항상 조건
두번째 어떤 프로젝션 필드 하고싶은거 1 안하고 싶은거 0

db.restaurants.aggregate([
            {$match : {"cuisine" : "Italian", "borough" : "Brooklyn"}},
            {$project : {
                        _id : 0,
                        cuisine : 1,
                        name : 1,
                        praise : {
                            $filter : {
                                input : "$grades",
                                as : "good",
                                cond :{$gte : ["$$good.score", 20]}
                            }
                        }
                        
                    }
                },
                {$match : {"praise.0" : {"$exists" : true}}},


 db.companies.aggregate([
                { $match: {"relationships.person": {$ne: null} } },   //relationships 라는 곳에 있는 person data 만 뽑아라 (null 은 필요없다)
                { $project: { relationships : 1, _id: 0} },	//relationship에서만 찍을거야
                { $unwind: "$relationships" },		//배열에 있는 여러 도큐먼트를 각각 잘라서 하나씩으로 만들겠다.
                { $group: {
                    _id : "$relationships.person",		// 그 중 person 만 그룹핑을 해서
                    count: { $sum: 1 }			// 동일한 사람에 대해서 1씩 올리겠다.
                } },
                { $sort: { count: -1} }			//내림차순
                ]).pretty()




어그리게이션 
그룹 스테이지
어떻게 쓰는지 볼 것 .객관식



