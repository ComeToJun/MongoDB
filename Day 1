탄생배경
2000년대 초 

실리콘 밸리에서 신생 it 기업들이 빅데이터에 손을 대기 시작
그 중 10 gen 이라는 회사.

SaaP 라는 것을 하는 회사
플랫폼을 서비스로 제공하는 회사.

아마존 웹 서비스 생각하면 됨

핸들해야 하는 관리해야 하는 데이터들이 너무 많아지기 시작.

그만큼 데이터를 엄청나게 사용하는 회사가 늘어나기 시작.

감당이 안되니 자체적으로 몽고db를 2007년에 만들어서 쓰기 시작
2009년에 오픈소스로 공개

Humongous 라는 영어단어에서 가져온 것.

이러면서 회사 이름까지 MongoDB 로 바꿔버림

당시 전체 데이터베이스 시장에서는 미미한 비율로 점유를 했지만,
빅데이터라는 분야에서는 한줄기 빛.

관계형 데이터베이스와 뭐가 다른가.

테이블이 있다고 했을때.

전세계 몇천만건의 데이터를 관리한다고 했을때, 많아지면 많아질수록 무거워질수밖에 없음

파티셔닝을 해보자 (물리적으로 나눠서 따로 보관) 예) A 에 100개 B에 100개 등등
가능은 하지만, 이렇게 하면, 걸쳐져 있는 정보를 가져올때 나눠져 있는 것들을 전부 기억해야 함.
만약 조인이나 지울때도 같은 방식이 되면 프로그래머가 전부 감당을 해야해서, 비지니스 로직에 신경을 써야 할개발자들이
db 로직에 계속 비중을 줘야 하는 상황이 발생 // 시간적인 낭비가 발생

몽고디비는 데이터베이스 안에서 파티셔닝을 제공해줌 ** shading 을 지원
몽고디비 자체 안에서 디비관리용 config 가 있어서 
쪼개져있는걸 생각하지 않고 본인은 shading 해놓은것만 이용 가능
이론적으로는 n 개까지 shading 이 가능
데이터를 분산해서 보관을 해주지만, 수정이나 병합등은 자체적으로 전부 해결해주기 때문에
따로 신경쓰지 않고도 자료를 마음대로 불러올 수 있음

***확장성이 굉장히 좋다


HBACE hard 플랫폼용 데이터베이스

Redis 전체 데이터베이스를 100이라고 보면 실제 사용하는건 50, 빈번하게 쓰는건 20 정도
 - 이 개념을 이용해서 주로 쓰느걸 메모리에 전체를 올려버림
 - 메모리 안에서 해버리니 속도가 엄청 빠름
 - 다른 것들이 필요해지면, 그것만 가져와서 replace 해버림
 - 속도가 중요해지다 보니 최근 핫 해짐
 - 쿠팡이나 인스타도 사용
 - 공식적인건 리눅스 버전에서만 사용 가능.


HBACE 와 Redis 는 시간상 물리적으로 부족하기에 Mongodb만 하기로 함


-----------------------------------------------------------------------
설치시 이동경로만 잘 확인할것
Compass 관리도구라 같이 깔면 인스톨이 안될 가능성이 있기 때문에
빼고 하는걸 추천
---------------------------------------------------------------------

사전 지식

1. 스키마가 없다.
 - 구조가 없다.
 - 도큐먼트 베이스 데이타베이스 
  즉, 데이터를 도큐먼트 식으로 저장한다.
 이걸 위해선 문법이 필요한데 이때 JSON 문법으로 사용한다.

서버간 웹통신때 심플하게 사람이 읽고 만들기 쉽게, 전송도 쉽게 할 수 있게 하기 위해 만든 언어
  무조건 { }
  키와 값으로 되어있음
 {"name" : "kim"}  이걸 하나의 도큐먼트라고 이야기 한다.

{"age" : 17, "sex" : m} ** , 로 여러개가 올 수 있다.
{"friends" : ["kim", "Joe"] //배열}


"friends" : {"kim", "Joe"} } **하나의 도큐먼트가 또 들어올 수 있음 (n개 중복 가능)


*** 타입이 정해져있지 않다. 넣고 싶은거 다 넣을 수 있음.

100% Json은 아님 Json like -> Json + mongodb 에서 제공하는것도 같이 포함
BSON 이라고 부르는데 어찌되었건 Json 을 바탕으로 한다.


1. 용어
 - document : row
 - collection : table
 - _id : primary key

2. document 대소문자 구분 ( 관례는 소문자)
- type sensitive
{"foo" : 3}
{"foo" : "3"}    **정수와 문자열, 다르다.

{"foo" : 3}
{"Foo" : 3} **다름

documents 내의 key/value 쌍은 순서를 갖는다.
{"x": 1, "y": 2}  {"y": 2, "x": 1} 		//다른의미


3. Collections
 -Dynamic schemas
 -서로 다른 shape 을 가지는 documents {"greeting": "Hello, world!"} 과 {"foo" : 5} 는 하나의 collection 에 
저장될 수 있음
- any documnet can be put into any collection

4. Databases
- MongoDB groups collections into databases
- A single instance of MongoDB can host several databases
- A database has its own permissions, and each database is stored in separae file on disk
- Database names are case-sensitive, even on non-case-sensetive filesystems. To keep things simple, try to just use lowercase characters.
- Database names are limited to a maximum of 64 bytes. **외울 필요 없음

-네이스페이스 사용
DB: cms
collection : blog.posts
blog.posts collection의 네임스페이스는 cms.blog.posts 임
네임스이스의 길이는 121 bytes 제한. **외울 필요 없음

5. 예약된 database 명
- admin
root database
- local
This database will never be replicated and can be used to store any collections that should be local t a single sever
- config
	sharding 이 구현되었을때, 데이터베이스 구성 정보를 저장하는 용도



함수로만 이루어져 있음

Ordered Insert
insertMany 의 두번째 파라미터로 true(기본값)을 주면, 제공되는 데이터 순서대로 삽입된다.
이러한 경우, 삽입 도중 에러를 만나면 그 이후의 데이터는 삽입되지 않는다.


Unordered Insert
insertMany 의 두번째 파라미터로 false(기본값)을 주면, MongoDB는 성능 향상을 위해 삽입되는 데이터를 내부적으로
재정렬 한다. 
삽입 도중 에러가 발생한 document만 제외하고 나머지 documents들은 정상적으로 삽입된다.

UpdateOne, UpdateMan 는 인자로 필터를 받으며, 두번째 인자로 변경될 documents 의 내용을 받는다.

replaceOne은 첫번째 인자로 필터를 받으며, 두번째 인자로 대치할 documnet 내용을 받는다.
만약, 2개 이상의 update가 특정 documnet에 동시에 전달 될 때는 먼저 서버에 도착한 update 내용이 반영되고
다음 도착한 내용이 뒤이어 적용된다. 결국, 마지막 전달된 내용이 최종적으로 반영된다.

Update 연산자 사용
- 일반적으로 document의 특정 필드만 업데이트가 필요하다. 이때 update 연산자를 이용할 수 있다.
update 연산자는 변경, 더하기, 삭제, 배열 및 embedded document 등의 복잡한 연산을 위해 사용된다.


robomongo 몽고디비 관리프로그램.

---------------------------------------------------------------------------------------------------------------



C:\Users\user>d:

D:\>mongo
MongoDB shell version v4.2.8
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("6423993e-5848-4d12-8f63-a318dd3714dd") }
MongoDB server version: 4.2.8
Server has startup warnings:
2020-07-06T09:23:59.821+0900 I  CONTROL  [initandlisten]
2020-07-06T09:23:59.821+0900 I  CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2020-07-06T09:23:59.822+0900 I  CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2020-07-06T09:23:59.822+0900 I  CONTROL  [initandlisten]
---
Enable MongoDB's free cloud-based monitoring service, which will then receive and display
metrics about your deployment (disk utilization, CPU, operation statistics, etc).

The monitoring data will be available on a MongoDB website with a unique URL accessible to you
and anyone you share the URL with. MongoDB may use this information to make product
improvements and to suggest MongoDB products and deployment options to you.

To enable free monitoring, run the following command: db.enableFreeMonitoring()
To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---

>
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB


post = {"title" : "My Blog Post",
content" : "Here's my blog post.","date" : new Date()}

 db.blog.insertOne(post)

db.blog.find()

db.blog.findOne()

post.comments = []
[ ]

db.blog.update({"title": "My Blog Post"}, post)

db.blog.findOne()
{
        "_id" : ObjectId("5f027e74250795271a99a1f5"),
        "title" : "My Blog Post",
        "content" : "Here's my blog post.",
        "date" : ISODate("2020-07-06T01:26:40.577Z"),
        "comments" : [ ]
}
> db.blog.remove({"title": "My Blog Post"})
WriteResult({ "nRemoved" : 1 })

> db.blog.findOne()
null






db.movies.insertMany([ {"_id": 0, "title" : "Top Gun"},
{"_id" : 1, "title" : "Back to the Futrue"},			//중복되는 키는 먼저 나오는 키만 출력되고 나머지는 출력되지 않는다.
{"_id" : 1, "title" : "Gremlins"},
{"_id" : 2, "title" : "Aliens"}])

db.movies.find()
{ "_id" : 0, "title" : "Top Gun" }
{ "_id" : 1, "title" : "Back to the Futrue" }

db.movies.insertMany([
{"_id" : 3, "title" : "Sixteen Candles"},
{"_id" : 4, "title" : "The Terminator"},
{"_id" : 4, "title" : "The Princess Bride"},
{"_id" : 5, "title" : "Scarface"}],
{"ordered" : false})			// ordered 에 false 가 들어가면 중복되는건 위에 하나만 나오되, 그 다음에 있는 데이터도 출력된다.


db.movies.find()
{ "_id" : 0, "title" : "Top Gun" }
{ "_id" : 1, "title" : "Back to the Futrue" }
{ "_id" : 3, "title" : "Sixteen Candles" }
{ "_id" : 4, "title" : "The Terminator" }
{ "_id" : 5, "title" : "Scarface" }

db.movies.deleteOne({"_id" : 4})

db.movies.find()
{ "_id" : 0, "title" : "Top Gun" }
{ "_id" : 1, "title" : "Back to the Futrue" }
{ "_id" : 3, "title" : "Sixteen Candles" }
{ "_id" : 5, "title" : "Scarface" }
db.movies.drop()
true

db.movies.insertMany([
{"_id" : 0, "title" : "Top Gun", "year": 1986},
{"_id" : 1, "title" : "Backt to the Future", "year" : 1985},
{"_id" : 3, "title" : "Sixteen Candles", "year" : 1984},
{"_id" : 4, "title" : "The Terminator", "year" : 1984},
{"_id" : 5, "title" : "Scarface", "year" : 1983 }])

db.movies.deleteMany({"year" : 1984})

db.movies.find()
{ "_id" : 0, "title" : "Top Gun", "year" : 1986 }
{ "_id" : 1, "title" : "Backt to the Future", "year" : 1985 }
{ "_id" : 5, "title" : "Scarface", "year" : 1983 }

db.movies.deleteMany({})
{ "acknowledged" : true, "deletedCount" : 3 }






db.users.insertOne({ "name" : "joe", "friends" : 32, "enemies" : 2})

> db.users.find()
var joe = db.users.findOne({ "name" : "joe"})
db.users.find()

 joe.relationships = { "friends" : joe.friends, "enemies" : joe.enemies}
{ "friends" : 32, "enemies" : 2 }


joe.username = joe.name
joe
delete joe.friends
true
delete joe.enemies
true
delete joe.name
true


db.people.insertMany ([
{"name" : "joe", "age" : 65},
{"name" : "joe", "age" : 20},
{"name" : "joe", "age" : 49}])

joe = db.people.findOne({ "name": "joe", "age" : 20})

> joe.age++
20
> joe.age
21
> db.people.replaceOne({"name" : "joe"}, joe)

> db.people.find()
{ "_id" : ObjectId("5f02acde250795271a99a1fc"), "name" : "joe", "age" : 65 }
{ "_id" : ObjectId("5f02acde250795271a99a1fd"), "name" : "joe", "age" : 20 }
{ "_id" : ObjectId("5f02acde250795271a99a1fe"), "name" : "joe", "age" : 49 }
키중복으로 하나도 바뀌지 않음 1fd 로 바꾸려고 전체를 바꾸려고 하니 충돌이 생김





db.people.replaceOne({ "_id" : ObjectId("5f02acde250795271a99a1fd")}, joe)

db.people.find()
{ "_id" : ObjectId("5f02acde250795271a99a1fc"), "name" : "joe", "age" : 65 }
{ "_id" : ObjectId("5f02acde250795271a99a1fd"), "name" : "joe", "age" : 21 }
{ "_id" : ObjectId("5f02acde250795271a99a1fe"), "name" : "joe", "age" : 49 }




db.analytics.insertOne({"url" : "www.example.com", "pageview" : 52})

db.analytics.find()
{ "_id" : ObjectId("5f02b7bab158eefd070871c2"), "url" : "www.example.com", "pageview" : 52, "pageviews" : 1 }
{ "_id" : ObjectId("5f02b81eb158eefd070871c3"), "url" : "www.example.com", "pageview" : 52 }
{ "_id" : ObjectId("5f02ba28250795271a99a1ff"), "url" : "www.example.com", "pageview" : 52 }

> db.analytics.updateOne({"url" : "www.example.com"}, {"$inc":  {"pageviews" : 1}})

db.analytics.find()
{ "_id" : ObjectId("5f02b7bab158eefd070871c2"), "url" : "www.example.com", "pageview" : 52, "pageviews" : 2 }
{ "_id" : ObjectId("5f02b81eb158eefd070871c3"), "url" : "www.example.com", "pageview" : 52 }
{ "_id" : ObjectId("5f02ba28250795271a99a1ff"), "url" : "www.example.com", "pageview" : 52 }







> db.users.insertOne({"name" : "joe", "age" : 30, "sex" : "male", "location" : "Seoul"})

db.users.updateOne({"name" : "joe"},
{"$set" : {"favorite book" : "War and Peace"}})


db.users.find().pretty()

db.users.updateOne({"name" : "joe"},
"$set" : {"favorite book" : "Green Eggs and Ham"}})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.users.find().pretty()
{
        "_id" : ObjectId("5f02becd250795271a99a200"),
        "name" : "joe",
        "age" : 30,
        "sex" : "male",
        "location" : "Seoul",
        "favorite book" : "Green Eggs and Ham"
}
 db.users.updateOne({"name" : "joe"},
{"$set" : {"favorite book" :
 ["Cat's Cradle", "Foundation Trilogy", "ender's Game"]}})

db.users.find().pretty()
{
        "_id" : ObjectId("5f02becd250795271a99a200"),
        "name" : "joe",
        "age" : 30,
        "sex" : "male",
        "location" : "Seoul",
        "favorite book" : [
                "Cat's Cradle",
                "Foundation Trilogy",
                "ender's Game"
        ]
}




db.users.updateOne({"name" : "joe"},
{"$unset" : {"favorite book" : 1}})

db.users.find().pretty()
{
        "_id" : ObjectId("5f02becd250795271a99a200"),
        "name" : "joe",
        "age" : 30,
        "sex" : "male",
        "location" : "Seoul"
}
> 1 은 아무 의미가 없음. 어쩔 수 없이 넣어야 하는 값이기 때문에 어떤 값을 넣어도 됨


------------------------------------------------------------------------------------------------------------------------------

db.blog.posts.insertOne( {"title" : "A Blog Post",
"content" : "...",
"author" : { "name" : "joe", "email" : "joe@example.com" }})


db.blog.posts.updateOne({"author.name" : "joe"},
{"$set" : {"author.name": "joe schmoe"}})

db.blog.posts.findOne()
{
        "_id" : ObjectId("5f02c2cf250795271a99a201"),
        "title" : "A Blog Post",
        "content" : "...",
        "author" : {
                "name" : "joe schmoe",
                "email" : "joe@example.com"
        }
}




db.games.insertOne({"game" : "pinball", "user" : "joe"})


db.games.updateOne({"game" : "pinball", "user" : "joe"},
{"$inc" : {"score" : 50}})

db.games.findOne()
{
        "_id" : ObjectId("5f02c539250795271a99a202"),
        "game" : "pinball",
        "user" : "joe",
        "score" : 50
}



db.games.updateOne({"game" : "pinball", "user" : "joe"}, {"$inc" : {"score" : 50 + 10000}})

db.games.findOne()
{
        "_id" : ObjectId("5f02c539250795271a99a202"),
        "game" : "pinball",
        "user" : "joe",
        "score" : 10100
}

> 문자열 "1" 에 숫자 1을 inc 시키면 에러가 난다. **시험문제

> db.strcounts.insertOne({"count" : "1"})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5f02c764250795271a99a203")
}
db.strcounts.updateMany({}, {"$inc" : {"count" : 1})





 db.blog.posts.insertMany([
 {"title" : "A blog post", "content" : "..."},
 {"title" : "Notice", "content" : "Welcome!!"}])


db.blog.posts.updateOne({"title" : "A blog post"},
{"$push" : {"comments" :
{"name" : "joe", "email" : "joe@example.com", "content" : "nice post."}}})


db.blog.posts.findOne()
{
        "_id" : ObjectId("5f02c83c250795271a99a204"),
        "title" : "A blog post",
        "content" : "...",
        "comments" : [
                {
                        "name" : "joe",
                        "email" : "joe@example.com",
                        "content" : "nice post."
                }
        ]

**push 입력순간 배열로 인식 // 배열에 넣어줌


*****push 로 넣으면 배열로 인식해서 배열에 또 넣어줌

 db.stock.ticker.updateOne({"_id" : "GOOG"},			
... {"$push" : {"hourly" : {"$each" : [562.776, 562.790, 559.123]}}})		

** update 되는게 없지만, 문법만 알아둘 것.

each 로 쓰면 배열로 하나씩 넣는게 아닌 한번에 전부 넣어주는게 가능함.




db.movies.insertOne({"genre" : "horror", "top10" :
 ["aaaa", "bbbb", "cccc", "dddd", "eeeee", "ffffff", "gggg", "hhhh", "iiiii", "jjjjj"]})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5f02cf37250795271a99a207")
}
db.movies.findOne()
{
        "_id" : ObjectId("5f02cf37250795271a99a207"),
        "genre" : "horror",
        "top10" : [
                "aaaa",
                "bbbb",
                "cccc",
                "dddd",
                "eeeee",
                "ffffff",
                "gggg",
                "hhhh",
                "iiiii",
                "jjjjj"
        ]
}


> db.movies.updateOne({"genre" : "horror"},
{"$push" : {"top10" : {"$each" : ["Nightmare on Elm Street", "Saw"],
"$slice" : -10}}})

db.movies.findOne()
{
        "_id" : ObjectId("5f02cf37250795271a99a207"),
        "genre" : "horror",
        "top10" : [
                "cccc",
                "dddd",
                "eeeee",
                "ffffff",
                "gggg",
                "hhhh",
                "iiiii",
                "jjjjj",
                "Nightmare on Elm Street",
                "Saw"
        ]
}

//slice 는 기존 주어진 데이터에서 정해둔 숫자 (-10) 만큼 남게 한다.
**총 12개가 되어야 하는데 뒤에서부터 10개만 보유하게 한다.

만약 +10이면 앞에서부터 10개, 즉, 뒤에 2개는 들어오지 못한다.


> db.movies.insertOne({"genre" : "action", "top10" : [{"name" : "11", "rating" : 4.3},
{"name" : "222", "rating" : 6.6}, {"name" : "3333", "rating" : 5.5}]})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5f02d285250795271a99a209")

> db.movies.find().pretty()
{
        "_id" : ObjectId("5f02cf37250795271a99a207"),
        "genre" : "horror",
        "top10" : [
                "cccc",
                "dddd",
                "eeeee",
                "ffffff",
                "gggg",
                "hhhh",
                "iiiii",
                "jjjjj",
                "Nightmare on Elm Street",
                "Saw"
        ]
}
{
        "_id" : ObjectId("5f02d285250795271a99a209"),
        "genre" : "action",
        "top 10" : [
                {
                        "name" : "11",
                        "rating" : 4.3
                },
                {
                        "name" : "222",
                        "rating" : 6.6
                },
                {
                        "name" : "3333",
                        "rating" : 5.5
                }
        ]
}







> db.movies.updateOne(
	{"genre" : "action"},
	{"$push" : {
		"top10" : {
			"$each" : [
					{
						"name" : "Nightmare on Elm Street",
						"rating" : 4.1
					}, 
					{
						"name" : "Saw", 
						"rating" :6.8
					}
				],
			"$slice" : 10, 
			"$sort" : {"rating" : -1}
			}
		}
	}
)

{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }				//sort - rating 값이 높은 놈부터 정렬하겠다.
> db.movies.find().pretty()
{
        "_id" : ObjectId("5f02cf37250795271a99a207"),
        "genre" : "horror",
        "top10" : [
                "cccc",
                "dddd",
                "eeeee",
                "ffffff",
                "gggg",
                "hhhh",
                "iiiii",
                "jjjjj",
                "Nightmare on Elm Street",
                "Saw"
        ]
}
{
    "_id" : ObjectId("5f02e8c1b158eefd070871c6"),
    "genre" : "action",
    "top10" : [ 
        {
            "name" : "Saw",
            "rating" : 6.8
        }, 
        {
            "name" : "222",
            "rating" : 6.6
        }, 
        {
            "name" : "3333",
            "rating" : 5.5
        }, 
        {
            "name" : "11",
            "rating" : 4.3
        }, 
        {
            "name" : "Nightmare on Elm Street",
            "rating" : 4.1
        }
    ]
}


*******each 가 있을때 slice 와 sort 를 사용할 수 있다.
******sort 를 먼저 해서 높은순부터 차례대로 순서를 만들고 slice 로 자른다.
*****sort -1 은 디센딩 1 은 어센딩


> db.products.insertOne({"product name": "Television"})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5f02d500250795271a99a20a")
}
> db.products.updateOne({"product name" : "Television"},
{$push: {"product color" : "Red"}})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }

>  db.products.updateOne({"product name" : "Television"},
{$push: {"product color" : "Blue"}})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }

> db.products.findOne()
{
        "_id" : ObjectId("5f02d500250795271a99a20a"),
        "product name" : "Television",
        "product color" : [
                "Red",
                "Blue"
        ]
}

> db.products.updateOne({"product color" : {"$ne" : "Red"}}, 		//not exist 라면 넣어라 
{$push : {"product color" : "Red"}})
{ "acknowledged" : true, "matchedCount" : 0, "modifiedCount" : 0 }		//Red 가 없으면 Red를 추가하겠다.



> db.users.drop()
true
> db.users.insertOne({"username" : "joe",
... "emails" : [
... "joe@example.com",
... "joe@naver.com",
... "joe@gmail.com"]})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5f02db79250795271a99a20b")
}


> db.users.updateOne({"username" : "joe"},
... {"$addToSet" : {"emails" : "joe@daum.net"}})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.users.findOne()
{
        "_id" : ObjectId("5f02db79250795271a99a20b"),
        "username" : "joe",
        "emails" : [
                "joe@example.com",
                "joe@naver.com",
                "joe@gmail.com",
                "joe@daum.net"
        ]
}

***있으면 들어가고, 없으면 말아라


> db.users.updateOne({"username" : "joe"},
... ... {$addToSet : {"emails" : "joe@naver.com"}})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 0 }
> db.users.findOne()
{
        "_id" : ObjectId("5f02db79250795271a99a20b"),
        "username" : "joe",
        "emails" : [
                "joe@example.com",
                "joe@naver.com",
                "joe@gmail.com",
                "joe@daum.net"
        ]
}

이미 있는거니 중복일때는 들어가지 않는다.




